// Generated by gencpp from file gazebo_msgs/ApplyJointEfforts.msg
// DO NOT EDIT!


#ifndef GAZEBO_MSGS_MESSAGE_APPLYJOINTEFFORTS_H
#define GAZEBO_MSGS_MESSAGE_APPLYJOINTEFFORTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gazebo_msgs
{
template <class ContainerAllocator>
struct ApplyJointEfforts_
{
  typedef ApplyJointEfforts_<ContainerAllocator> Type;

  ApplyJointEfforts_()
    : name()
    , effort()
    , start_time()
    , duration()  {
    }
  ApplyJointEfforts_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , effort(_alloc)
    , start_time()
    , duration()  {
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _name_type;
  _name_type name;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _effort_type;
  _effort_type effort;

   typedef ros::Time _start_time_type;
  _start_time_type start_time;

   typedef ros::Duration _duration_type;
  _duration_type duration;




  typedef boost::shared_ptr< ::gazebo_msgs::ApplyJointEfforts_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gazebo_msgs::ApplyJointEfforts_<ContainerAllocator> const> ConstPtr;

}; // struct ApplyJointEfforts_

typedef ::gazebo_msgs::ApplyJointEfforts_<std::allocator<void> > ApplyJointEfforts;

typedef boost::shared_ptr< ::gazebo_msgs::ApplyJointEfforts > ApplyJointEffortsPtr;
typedef boost::shared_ptr< ::gazebo_msgs::ApplyJointEfforts const> ApplyJointEffortsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gazebo_msgs::ApplyJointEfforts_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gazebo_msgs::ApplyJointEfforts_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace gazebo_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/jade/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/jade/share/std_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/jade/share/trajectory_msgs/cmake/../msg'], 'gazebo_msgs': ['/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/existing_packages/gazebo_ros_pkgs/gazebo_msgs/msg'], 'geometry_msgs': ['/opt/ros/jade/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::gazebo_msgs::ApplyJointEfforts_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gazebo_msgs::ApplyJointEfforts_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gazebo_msgs::ApplyJointEfforts_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gazebo_msgs::ApplyJointEfforts_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gazebo_msgs::ApplyJointEfforts_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gazebo_msgs::ApplyJointEfforts_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gazebo_msgs::ApplyJointEfforts_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cabae2e7185416ca7de6918589d2983f";
  }

  static const char* value(const ::gazebo_msgs::ApplyJointEfforts_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcabae2e7185416caULL;
  static const uint64_t static_value2 = 0x7de6918589d2983fULL;
};

template<class ContainerAllocator>
struct DataType< ::gazebo_msgs::ApplyJointEfforts_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gazebo_msgs/ApplyJointEfforts";
  }

  static const char* value(const ::gazebo_msgs::ApplyJointEfforts_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gazebo_msgs::ApplyJointEfforts_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# set urdf joint effort\n\
string[] name               # joint to apply wrench (linear force and torque)\n\
float64[] effort            # effort to apply\n\
time start_time             # optional wrench application start time (seconds)\n\
                            # if start_time < current time, start as soon as possible\n\
duration duration           # optional duration of wrench application time (seconds)\n\
                            # if duration < 0, apply wrench continuously without end\n\
                            # if duration = 0, do nothing\n\
                            # if duration < step size, assume step size and\n\
                            #               display warning in status_message\n\
";
  }

  static const char* value(const ::gazebo_msgs::ApplyJointEfforts_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gazebo_msgs::ApplyJointEfforts_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.effort);
      stream.next(m.start_time);
      stream.next(m.duration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct ApplyJointEfforts_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gazebo_msgs::ApplyJointEfforts_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gazebo_msgs::ApplyJointEfforts_<ContainerAllocator>& v)
  {
    s << indent << "name[]" << std::endl;
    for (size_t i = 0; i < v.name.size(); ++i)
    {
      s << indent << "  name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name[i]);
    }
    s << indent << "effort[]" << std::endl;
    for (size_t i = 0; i < v.effort.size(); ++i)
    {
      s << indent << "  effort[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.effort[i]);
    }
    s << indent << "start_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.start_time);
    s << indent << "duration: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.duration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GAZEBO_MSGS_MESSAGE_APPLYJOINTEFFORTS_H
