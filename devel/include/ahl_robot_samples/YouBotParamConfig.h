//#line 2 "/opt/ros/jade/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
// 
// File autogenerated for the ahl_robot_samples package 
// by the dynamic_reconfigure package.
// Please do not edit.
// 
// ********************************************************/

#ifndef __ahl_robot_samples__YOUBOTPARAMCONFIG_H__
#define __ahl_robot_samples__YOUBOTPARAMCONFIG_H__

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace ahl_robot_samples
{
  class YouBotParamConfigStatics;
  
  class YouBotParamConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l, 
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      
      virtual void clamp(YouBotParamConfig &config, const YouBotParamConfig &max, const YouBotParamConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const YouBotParamConfig &config1, const YouBotParamConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, YouBotParamConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const YouBotParamConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, YouBotParamConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const YouBotParamConfig &config) const = 0;
      virtual void getValue(const YouBotParamConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;
    
    template <class T>
    class ParamDescription : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string name, std::string type, uint32_t level, 
          std::string description, std::string edit_method, T YouBotParamConfig::* f) :
        AbstractParamDescription(name, type, level, description, edit_method),
        field(f)
      {}

      T (YouBotParamConfig::* field);

      virtual void clamp(YouBotParamConfig &config, const YouBotParamConfig &max, const YouBotParamConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;
        
        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const YouBotParamConfig &config1, const YouBotParamConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, YouBotParamConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const YouBotParamConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, YouBotParamConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const YouBotParamConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const YouBotParamConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, YouBotParamConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    template<class T, class PT>
    class GroupDescription : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string name, std::string type, int parent, int id, bool s, T PT::* f) : AbstractGroupDescription(name, type, parent, id, s), field(f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, YouBotParamConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T (PT::* field);
      std::vector<YouBotParamConfig::AbstractGroupDescriptionConstPtr> groups;
    };
    
class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(YouBotParamConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);


      }
    }

    

    bool state;
    std::string name;

    class YOUBOT_PARAM
{
  public:
    YOUBOT_PARAM()
    {
      state = true;
      name = "youbot_param";
    }

    void setParams(YouBotParamConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("show_target"==(*_i)->name){show_target = boost::any_cast<bool>(val);}
        if("sin_x"==(*_i)->name){sin_x = boost::any_cast<bool>(val);}
        if("sin_y"==(*_i)->name){sin_y = boost::any_cast<bool>(val);}
        if("sin_z"==(*_i)->name){sin_z = boost::any_cast<bool>(val);}
        if("x_arm"==(*_i)->name){x_arm = boost::any_cast<double>(val);}
        if("y_arm"==(*_i)->name){y_arm = boost::any_cast<double>(val);}
        if("z_arm"==(*_i)->name){z_arm = boost::any_cast<double>(val);}
        if("roll_arm"==(*_i)->name){roll_arm = boost::any_cast<double>(val);}
        if("pitch_arm"==(*_i)->name){pitch_arm = boost::any_cast<double>(val);}
        if("yaw_arm"==(*_i)->name){yaw_arm = boost::any_cast<double>(val);}
        if("x_base"==(*_i)->name){x_base = boost::any_cast<double>(val);}
        if("y_base"==(*_i)->name){y_base = boost::any_cast<double>(val);}
        if("z_base"==(*_i)->name){z_base = boost::any_cast<double>(val);}
        if("roll_base"==(*_i)->name){roll_base = boost::any_cast<double>(val);}
        if("pitch_base"==(*_i)->name){pitch_base = boost::any_cast<double>(val);}
        if("yaw_base"==(*_i)->name){yaw_base = boost::any_cast<double>(val);}
        if("q_base1"==(*_i)->name){q_base1 = boost::any_cast<double>(val);}
        if("q_base2"==(*_i)->name){q_base2 = boost::any_cast<double>(val);}
        if("q_base3"==(*_i)->name){q_base3 = boost::any_cast<double>(val);}
        if("q1"==(*_i)->name){q1 = boost::any_cast<double>(val);}
        if("q2"==(*_i)->name){q2 = boost::any_cast<double>(val);}
        if("q3"==(*_i)->name){q3 = boost::any_cast<double>(val);}
        if("q4"==(*_i)->name){q4 = boost::any_cast<double>(val);}
        if("q5"==(*_i)->name){q5 = boost::any_cast<double>(val);}
      }
    }

    bool show_target;
bool sin_x;
bool sin_y;
bool sin_z;
double x_arm;
double y_arm;
double z_arm;
double roll_arm;
double pitch_arm;
double yaw_arm;
double x_base;
double y_base;
double z_base;
double roll_base;
double pitch_base;
double yaw_base;
double q_base1;
double q_base2;
double q_base3;
double q1;
double q2;
double q3;
double q4;
double q5;

    bool state;
    std::string name;

    
}youbot_param;

}groups;



//#line 9 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      bool show_target;
//#line 10 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      bool sin_x;
//#line 11 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      bool sin_y;
//#line 12 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      bool sin_z;
//#line 14 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      double x_arm;
//#line 15 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      double y_arm;
//#line 16 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      double z_arm;
//#line 18 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      double roll_arm;
//#line 19 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      double pitch_arm;
//#line 20 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      double yaw_arm;
//#line 22 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      double x_base;
//#line 23 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      double y_base;
//#line 24 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      double z_base;
//#line 26 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      double roll_base;
//#line 27 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      double pitch_base;
//#line 28 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      double yaw_base;
//#line 30 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      double q_base1;
//#line 31 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      double q_base2;
//#line 32 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      double q_base3;
//#line 33 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      double q1;
//#line 34 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      double q2;
//#line 35 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      double q3;
//#line 36 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      double q4;
//#line 37 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      double q5;
//#line 218 "/opt/ros/jade/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("YouBotParamConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }
    
    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }
    
    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const YouBotParamConfig &__max__ = __getMax__();
      const YouBotParamConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const YouBotParamConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }
    
    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const YouBotParamConfig &__getDefault__();
    static const YouBotParamConfig &__getMax__();
    static const YouBotParamConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();
    
  private:
    static const YouBotParamConfigStatics *__get_statics__();
  };
  
  template <> // Max and min are ignored for strings.
  inline void YouBotParamConfig::ParamDescription<std::string>::clamp(YouBotParamConfig &config, const YouBotParamConfig &max, const YouBotParamConfig &min) const
  {
    return;
  }

  class YouBotParamConfigStatics
  {
    friend class YouBotParamConfig;
    
    YouBotParamConfigStatics()
    {
YouBotParamConfig::GroupDescription<YouBotParamConfig::DEFAULT, YouBotParamConfig> Default("Default", "", 0, 0, true, &YouBotParamConfig::groups);
YouBotParamConfig::GroupDescription<YouBotParamConfig::DEFAULT::YOUBOT_PARAM, YouBotParamConfig::DEFAULT> youbot_param("youbot_param", "", 0, 1, true, &YouBotParamConfig::DEFAULT::youbot_param);
//#line 9 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __min__.show_target = 0;
//#line 9 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __max__.show_target = 1;
//#line 9 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __default__.show_target = 1;
//#line 9 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      youbot_param.abstract_parameters.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<bool>("show_target", "bool", 0, "Show reference position", "", &YouBotParamConfig::show_target)));
//#line 9 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __param_descriptions__.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<bool>("show_target", "bool", 0, "Show reference position", "", &YouBotParamConfig::show_target)));
//#line 10 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __min__.sin_x = 0;
//#line 10 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __max__.sin_x = 1;
//#line 10 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __default__.sin_x = 0;
//#line 10 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      youbot_param.abstract_parameters.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<bool>("sin_x", "bool", 0, "desired x sin wave", "", &YouBotParamConfig::sin_x)));
//#line 10 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __param_descriptions__.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<bool>("sin_x", "bool", 0, "desired x sin wave", "", &YouBotParamConfig::sin_x)));
//#line 11 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __min__.sin_y = 0;
//#line 11 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __max__.sin_y = 1;
//#line 11 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __default__.sin_y = 0;
//#line 11 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      youbot_param.abstract_parameters.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<bool>("sin_y", "bool", 0, "desired y sin wave", "", &YouBotParamConfig::sin_y)));
//#line 11 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __param_descriptions__.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<bool>("sin_y", "bool", 0, "desired y sin wave", "", &YouBotParamConfig::sin_y)));
//#line 12 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __min__.sin_z = 0;
//#line 12 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __max__.sin_z = 1;
//#line 12 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __default__.sin_z = 0;
//#line 12 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      youbot_param.abstract_parameters.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<bool>("sin_z", "bool", 0, "desired z sin wave", "", &YouBotParamConfig::sin_z)));
//#line 12 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __param_descriptions__.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<bool>("sin_z", "bool", 0, "desired z sin wave", "", &YouBotParamConfig::sin_z)));
//#line 14 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __min__.x_arm = -3.0;
//#line 14 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __max__.x_arm = 3.0;
//#line 14 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __default__.x_arm = 0.5;
//#line 14 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      youbot_param.abstract_parameters.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<double>("x_arm", "double", 0, "desired x for gripper", "", &YouBotParamConfig::x_arm)));
//#line 14 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __param_descriptions__.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<double>("x_arm", "double", 0, "desired x for gripper", "", &YouBotParamConfig::x_arm)));
//#line 15 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __min__.y_arm = -3.0;
//#line 15 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __max__.y_arm = 3.0;
//#line 15 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __default__.y_arm = 0.0;
//#line 15 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      youbot_param.abstract_parameters.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<double>("y_arm", "double", 0, "desired y for gripper", "", &YouBotParamConfig::y_arm)));
//#line 15 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __param_descriptions__.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<double>("y_arm", "double", 0, "desired y for gripper", "", &YouBotParamConfig::y_arm)));
//#line 16 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __min__.z_arm = 0.0;
//#line 16 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __max__.z_arm = 1.0;
//#line 16 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __default__.z_arm = 0.07;
//#line 16 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      youbot_param.abstract_parameters.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<double>("z_arm", "double", 0, "desired z for gripper", "", &YouBotParamConfig::z_arm)));
//#line 16 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __param_descriptions__.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<double>("z_arm", "double", 0, "desired z for gripper", "", &YouBotParamConfig::z_arm)));
//#line 18 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __min__.roll_arm = -3.14;
//#line 18 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __max__.roll_arm = 3.14;
//#line 18 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __default__.roll_arm = 0.0;
//#line 18 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      youbot_param.abstract_parameters.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<double>("roll_arm", "double", 0, "desired roll  for gripper", "", &YouBotParamConfig::roll_arm)));
//#line 18 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __param_descriptions__.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<double>("roll_arm", "double", 0, "desired roll  for gripper", "", &YouBotParamConfig::roll_arm)));
//#line 19 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __min__.pitch_arm = -3.14;
//#line 19 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __max__.pitch_arm = 3.14;
//#line 19 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __default__.pitch_arm = 3.14;
//#line 19 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      youbot_param.abstract_parameters.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<double>("pitch_arm", "double", 0, "desired pitch for gripper", "", &YouBotParamConfig::pitch_arm)));
//#line 19 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __param_descriptions__.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<double>("pitch_arm", "double", 0, "desired pitch for gripper", "", &YouBotParamConfig::pitch_arm)));
//#line 20 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __min__.yaw_arm = -3.14;
//#line 20 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __max__.yaw_arm = 3.14;
//#line 20 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __default__.yaw_arm = 0.0;
//#line 20 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      youbot_param.abstract_parameters.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<double>("yaw_arm", "double", 0, "desired yaw   for gripper", "", &YouBotParamConfig::yaw_arm)));
//#line 20 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __param_descriptions__.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<double>("yaw_arm", "double", 0, "desired yaw   for gripper", "", &YouBotParamConfig::yaw_arm)));
//#line 22 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __min__.x_base = -3.0;
//#line 22 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __max__.x_base = 3.0;
//#line 22 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __default__.x_base = 0.4;
//#line 22 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      youbot_param.abstract_parameters.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<double>("x_base", "double", 0, "desired x for base", "", &YouBotParamConfig::x_base)));
//#line 22 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __param_descriptions__.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<double>("x_base", "double", 0, "desired x for base", "", &YouBotParamConfig::x_base)));
//#line 23 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __min__.y_base = -3.0;
//#line 23 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __max__.y_base = 3.0;
//#line 23 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __default__.y_base = 0.2;
//#line 23 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      youbot_param.abstract_parameters.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<double>("y_base", "double", 0, "desired y for base", "", &YouBotParamConfig::y_base)));
//#line 23 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __param_descriptions__.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<double>("y_base", "double", 0, "desired y for base", "", &YouBotParamConfig::y_base)));
//#line 24 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __min__.z_base = 0.0;
//#line 24 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __max__.z_base = 3.0;
//#line 24 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __default__.z_base = 0.4;
//#line 24 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      youbot_param.abstract_parameters.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<double>("z_base", "double", 0, "desired z for base", "", &YouBotParamConfig::z_base)));
//#line 24 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __param_descriptions__.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<double>("z_base", "double", 0, "desired z for base", "", &YouBotParamConfig::z_base)));
//#line 26 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __min__.roll_base = -3.14;
//#line 26 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __max__.roll_base = 3.14;
//#line 26 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __default__.roll_base = 0.0;
//#line 26 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      youbot_param.abstract_parameters.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<double>("roll_base", "double", 0, "desired roll  for base", "", &YouBotParamConfig::roll_base)));
//#line 26 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __param_descriptions__.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<double>("roll_base", "double", 0, "desired roll  for base", "", &YouBotParamConfig::roll_base)));
//#line 27 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __min__.pitch_base = -3.14;
//#line 27 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __max__.pitch_base = 3.14;
//#line 27 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __default__.pitch_base = 0.0;
//#line 27 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      youbot_param.abstract_parameters.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<double>("pitch_base", "double", 0, "desired pitch for base", "", &YouBotParamConfig::pitch_base)));
//#line 27 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __param_descriptions__.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<double>("pitch_base", "double", 0, "desired pitch for base", "", &YouBotParamConfig::pitch_base)));
//#line 28 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __min__.yaw_base = -3.14;
//#line 28 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __max__.yaw_base = 3.14;
//#line 28 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __default__.yaw_base = 0.0;
//#line 28 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      youbot_param.abstract_parameters.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<double>("yaw_base", "double", 0, "desired yaw   for base", "", &YouBotParamConfig::yaw_base)));
//#line 28 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __param_descriptions__.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<double>("yaw_base", "double", 0, "desired yaw   for base", "", &YouBotParamConfig::yaw_base)));
//#line 30 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __min__.q_base1 = -3.0;
//#line 30 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __max__.q_base1 = 3.0;
//#line 30 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __default__.q_base1 = 0.0;
//#line 30 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      youbot_param.abstract_parameters.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<double>("q_base1", "double", 0, "displacement of base along x axis", "", &YouBotParamConfig::q_base1)));
//#line 30 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __param_descriptions__.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<double>("q_base1", "double", 0, "displacement of base along x axis", "", &YouBotParamConfig::q_base1)));
//#line 31 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __min__.q_base2 = -3.0;
//#line 31 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __max__.q_base2 = 3.0;
//#line 31 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __default__.q_base2 = 0.0;
//#line 31 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      youbot_param.abstract_parameters.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<double>("q_base2", "double", 0, "displacement of base along y axis", "", &YouBotParamConfig::q_base2)));
//#line 31 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __param_descriptions__.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<double>("q_base2", "double", 0, "displacement of base along y axis", "", &YouBotParamConfig::q_base2)));
//#line 32 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __min__.q_base3 = -3.14;
//#line 32 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __max__.q_base3 = 3.14;
//#line 32 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __default__.q_base3 = 0.0;
//#line 32 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      youbot_param.abstract_parameters.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<double>("q_base3", "double", 0, "orientation of base", "", &YouBotParamConfig::q_base3)));
//#line 32 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __param_descriptions__.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<double>("q_base3", "double", 0, "orientation of base", "", &YouBotParamConfig::q_base3)));
//#line 33 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __min__.q1 = -3.14;
//#line 33 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __max__.q1 = 3.14;
//#line 33 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __default__.q1 = 0.0;
//#line 33 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      youbot_param.abstract_parameters.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<double>("q1", "double", 0, "angle of arm joint1", "", &YouBotParamConfig::q1)));
//#line 33 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __param_descriptions__.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<double>("q1", "double", 0, "angle of arm joint1", "", &YouBotParamConfig::q1)));
//#line 34 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __min__.q2 = -3.14;
//#line 34 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __max__.q2 = 3.14;
//#line 34 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __default__.q2 = 0.5;
//#line 34 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      youbot_param.abstract_parameters.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<double>("q2", "double", 0, "angle of arm joint2", "", &YouBotParamConfig::q2)));
//#line 34 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __param_descriptions__.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<double>("q2", "double", 0, "angle of arm joint2", "", &YouBotParamConfig::q2)));
//#line 35 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __min__.q3 = -3.14;
//#line 35 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __max__.q3 = 3.14;
//#line 35 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __default__.q3 = 0.5;
//#line 35 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      youbot_param.abstract_parameters.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<double>("q3", "double", 0, "angle of arm joint3", "", &YouBotParamConfig::q3)));
//#line 35 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __param_descriptions__.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<double>("q3", "double", 0, "angle of arm joint3", "", &YouBotParamConfig::q3)));
//#line 36 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __min__.q4 = -3.14;
//#line 36 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __max__.q4 = 3.14;
//#line 36 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __default__.q4 = 0.5;
//#line 36 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      youbot_param.abstract_parameters.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<double>("q4", "double", 0, "angle of arm joint4", "", &YouBotParamConfig::q4)));
//#line 36 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __param_descriptions__.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<double>("q4", "double", 0, "angle of arm joint4", "", &YouBotParamConfig::q4)));
//#line 37 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __min__.q5 = -3.14;
//#line 37 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __max__.q5 = 3.14;
//#line 37 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __default__.q5 = 0.0;
//#line 37 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      youbot_param.abstract_parameters.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<double>("q5", "double", 0, "angle of arm joint5", "", &YouBotParamConfig::q5)));
//#line 37 "/home/bilynbk/catkin_ws_ahl/src/ahl_ros_packages/ahl_wbc/samples/ahl_robot_samples/cfg/YouBotParam.cfg"
      __param_descriptions__.push_back(YouBotParamConfig::AbstractParamDescriptionConstPtr(new YouBotParamConfig::ParamDescription<double>("q5", "double", 0, "angle of arm joint5", "", &YouBotParamConfig::q5)));
//#line 109 "/opt/ros/jade/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      youbot_param.convertParams();
//#line 109 "/opt/ros/jade/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(YouBotParamConfig::AbstractGroupDescriptionConstPtr(new YouBotParamConfig::GroupDescription<YouBotParamConfig::DEFAULT::YOUBOT_PARAM, YouBotParamConfig::DEFAULT>(youbot_param)));
//#line 109 "/opt/ros/jade/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(YouBotParamConfig::AbstractGroupDescriptionConstPtr(new YouBotParamConfig::GroupDescription<YouBotParamConfig::DEFAULT::YOUBOT_PARAM, YouBotParamConfig::DEFAULT>(youbot_param)));
//#line 235 "/opt/ros/jade/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 235 "/opt/ros/jade/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(YouBotParamConfig::AbstractGroupDescriptionConstPtr(new YouBotParamConfig::GroupDescription<YouBotParamConfig::DEFAULT, YouBotParamConfig>(Default)));
//#line 353 "/opt/ros/jade/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<YouBotParamConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__); 
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__); 
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__); 
    }
    std::vector<YouBotParamConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<YouBotParamConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    YouBotParamConfig __max__;
    YouBotParamConfig __min__;
    YouBotParamConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const YouBotParamConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static YouBotParamConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &YouBotParamConfig::__getDescriptionMessage__() 
  {
    return __get_statics__()->__description_message__;
  }

  inline const YouBotParamConfig &YouBotParamConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }
  
  inline const YouBotParamConfig &YouBotParamConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }
  
  inline const YouBotParamConfig &YouBotParamConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }
  
  inline const std::vector<YouBotParamConfig::AbstractParamDescriptionConstPtr> &YouBotParamConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<YouBotParamConfig::AbstractGroupDescriptionConstPtr> &YouBotParamConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const YouBotParamConfigStatics *YouBotParamConfig::__get_statics__()
  {
    const static YouBotParamConfigStatics *statics;
  
    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = YouBotParamConfigStatics::get_instance();
    
    return statics;
  }


}

#endif // __YOUBOTPARAMRECONFIGURATOR_H__
